{"remainingRequest":"/home/snehalj/Desktop/i-programmer/admin-dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/snehalj/Desktop/i-programmer/admin-dashboard/node_modules/ngx-toastr/esm5/ngx-toastr.js","dependencies":[{"path":"/home/snehalj/Desktop/i-programmer/admin-dashboard/node_modules/ngx-toastr/esm5/ngx-toastr.js","mtime":499162500000},{"path":"/home/snehalj/Desktop/i-programmer/admin-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/snehalj/Desktop/i-programmer/admin-dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends, __values } from 'tslib';\nimport { ApplicationRef, ComponentFactoryResolver, Injectable, Directive, ElementRef, NgModule, InjectionToken, Inject, Injector, NgZone, SecurityContext, Component, HostBinding, HostListener, Optional, SkipSelf } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nvar ComponentPortal = /*@__PURE__*/ (function () {\n    function ComponentPortal(component, injector) {\n        this.component = component;\n        this.injector = injector;\n    }\n    ComponentPortal.prototype.attach = function (host, newestOnTop) {\n        this._attachedHost = host;\n        return host.attach(this, newestOnTop);\n    };\n    ComponentPortal.prototype.detach = function () {\n        var host = this._attachedHost;\n        if (host) {\n            this._attachedHost = undefined;\n            return host.detach();\n        }\n    };\n    Object.defineProperty(ComponentPortal.prototype, \"isAttached\", {\n        get: function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ComponentPortal.prototype.setAttachedHost = function (host) {\n        this._attachedHost = host;\n    };\n    return ComponentPortal;\n}());\nvar BasePortalHost = /*@__PURE__*/ (function () {\n    function BasePortalHost() {\n    }\n    BasePortalHost.prototype.attach = function (portal, newestOnTop) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal, newestOnTop);\n    };\n    BasePortalHost.prototype.detach = function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost();\n        }\n        this._attachedPortal = undefined;\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = undefined;\n        }\n    };\n    BasePortalHost.prototype.setDisposeFn = function (fn) {\n        this._disposeFn = fn;\n    };\n    return BasePortalHost;\n}());\nvar DomPortalHost = /*@__PURE__*/ (function (_super) {\n    __extends(DomPortalHost, _super);\n    function DomPortalHost(_hostDomElement, _componentFactoryResolver, _appRef) {\n        var _this = _super.call(this) || this;\n        _this._hostDomElement = _hostDomElement;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._appRef = _appRef;\n        return _this;\n    }\n    DomPortalHost.prototype.attachComponentPortal = function (portal, newestOnTop) {\n        var _this = this;\n        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        var componentRef;\n        componentRef = componentFactory.create(portal.injector);\n        this._appRef.attachView(componentRef.hostView);\n        this.setDisposeFn(function () {\n            _this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n        });\n        if (newestOnTop) {\n            this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n        }\n        else {\n            this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        }\n        return componentRef;\n    };\n    DomPortalHost.prototype._getComponentRootNode = function (componentRef) {\n        return (((componentRef.hostView)).rootNodes[0]);\n    };\n    return DomPortalHost;\n}(BasePortalHost));\nvar OverlayRef = /*@__PURE__*/ (function () {\n    function OverlayRef(_portalHost) {\n        this._portalHost = _portalHost;\n    }\n    OverlayRef.prototype.attach = function (portal, newestOnTop) {\n        if (newestOnTop === void 0) {\n            newestOnTop = true;\n        }\n        return this._portalHost.attach(portal, newestOnTop);\n    };\n    OverlayRef.prototype.detach = function () {\n        return this._portalHost.detach();\n    };\n    return OverlayRef;\n}());\nvar OverlayContainer = /*@__PURE__*/ (function () {\n    function OverlayContainer() {\n    }\n    OverlayContainer.prototype.getContainerElement = function () {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    };\n    OverlayContainer.prototype._createContainer = function () {\n        var container = document.createElement('div');\n        container.classList.add('overlay-container');\n        document.body.appendChild(container);\n        this._containerElement = container;\n    };\n    return OverlayContainer;\n}());\nvar Overlay = /*@__PURE__*/ (function () {\n    function Overlay(_overlayContainer, _componentFactoryResolver, _appRef) {\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._paneElements = {};\n    }\n    Overlay.prototype.create = function (positionClass, overlayContainer) {\n        return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    };\n    Overlay.prototype.getPaneElement = function (positionClass, overlayContainer) {\n        if (positionClass === void 0) {\n            positionClass = '';\n        }\n        if (!this._paneElements[positionClass]) {\n            this._paneElements[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n        }\n        return this._paneElements[positionClass];\n    };\n    Overlay.prototype._createPaneElement = function (positionClass, overlayContainer) {\n        var pane = document.createElement('div');\n        pane.id = 'toast-container';\n        pane.classList.add(positionClass);\n        pane.classList.add('toast-container');\n        if (!overlayContainer) {\n            this._overlayContainer.getContainerElement().appendChild(pane);\n        }\n        else {\n            overlayContainer.getContainerElement().appendChild(pane);\n        }\n        return pane;\n    };\n    Overlay.prototype._createPortalHost = function (pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    };\n    Overlay.prototype._createOverlayRef = function (pane) {\n        return new OverlayRef(this._createPortalHost(pane));\n    };\n    return Overlay;\n}());\nvar OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayContainer,\n];\nvar ToastContainerDirective = /*@__PURE__*/ (function () {\n    function ToastContainerDirective(el) {\n        this.el = el;\n    }\n    ToastContainerDirective.prototype.getContainerElement = function () {\n        return this.el.nativeElement;\n    };\n    return ToastContainerDirective;\n}());\nvar ToastContainerModule = /*@__PURE__*/ (function () {\n    function ToastContainerModule() {\n    }\n    return ToastContainerModule;\n}());\nvar ToastPackage = /*@__PURE__*/ (function () {\n    function ToastPackage(toastId, config, message, title, toastType, toastRef) {\n        var _this = this;\n        this.toastId = toastId;\n        this.config = config;\n        this.message = message;\n        this.title = title;\n        this.toastType = toastType;\n        this.toastRef = toastRef;\n        this._onTap = new Subject();\n        this._onAction = new Subject();\n        this.toastRef.afterClosed().subscribe(function () {\n            _this._onAction.complete();\n            _this._onTap.complete();\n        });\n    }\n    ToastPackage.prototype.triggerTap = function () {\n        this._onTap.next();\n        this._onTap.complete();\n    };\n    ToastPackage.prototype.onTap = function () {\n        return this._onTap.asObservable();\n    };\n    ToastPackage.prototype.triggerAction = function (action) {\n        this._onAction.next(action);\n    };\n    ToastPackage.prototype.onAction = function () {\n        return this._onAction.asObservable();\n    };\n    return ToastPackage;\n}());\nvar ToastRef = /*@__PURE__*/ (function () {\n    function ToastRef(_overlayRef) {\n        this._overlayRef = _overlayRef;\n        this._afterClosed = new Subject();\n        this._activate = new Subject();\n        this._manualClose = new Subject();\n    }\n    ToastRef.prototype.manualClose = function () {\n        this._manualClose.next();\n        this._manualClose.complete();\n    };\n    ToastRef.prototype.manualClosed = function () {\n        return this._manualClose.asObservable();\n    };\n    ToastRef.prototype.close = function () {\n        this._overlayRef.detach();\n        this._afterClosed.next();\n        this._afterClosed.complete();\n        this._manualClose.complete();\n        this._activate.complete();\n    };\n    ToastRef.prototype.afterClosed = function () {\n        return this._afterClosed.asObservable();\n    };\n    ToastRef.prototype.isInactive = function () {\n        return this._activate.isStopped;\n    };\n    ToastRef.prototype.activate = function () {\n        this._activate.next();\n        this._activate.complete();\n    };\n    ToastRef.prototype.afterActivate = function () {\n        return this._activate.asObservable();\n    };\n    return ToastRef;\n}());\nvar ToastInjector = /*@__PURE__*/ (function () {\n    function ToastInjector(_toastPackage, _parentInjector) {\n        this._toastPackage = _toastPackage;\n        this._parentInjector = _parentInjector;\n    }\n    ToastInjector.prototype.get = function (token, notFoundValue) {\n        if (token === ToastPackage && this._toastPackage) {\n            return this._toastPackage;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return ToastInjector;\n}());\nvar TOAST_CONFIG = new InjectionToken('ToastConfig');\nvar ToastrService = /*@__PURE__*/ (function () {\n    function ToastrService(token, overlay, _injector, sanitizer, ngZone) {\n        this.overlay = overlay;\n        this._injector = _injector;\n        this.sanitizer = sanitizer;\n        this.ngZone = ngZone;\n        this.currentlyActive = 0;\n        this.toasts = [];\n        this.index = 0;\n        var defaultConfig = new token.defaults;\n        this.toastrConfig = Object.assign({}, defaultConfig, token.config);\n        this.toastrConfig.iconClasses = Object.assign({}, defaultConfig.iconClasses, token.config.iconClasses);\n    }\n    ToastrService.prototype.show = function (message, title, override, type) {\n        if (override === void 0) {\n            override = {};\n        }\n        if (type === void 0) {\n            type = '';\n        }\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    };\n    ToastrService.prototype.success = function (message, title, override) {\n        if (override === void 0) {\n            override = {};\n        }\n        var type = this.toastrConfig.iconClasses.success || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    };\n    ToastrService.prototype.error = function (message, title, override) {\n        if (override === void 0) {\n            override = {};\n        }\n        var type = this.toastrConfig.iconClasses.error || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    };\n    ToastrService.prototype.info = function (message, title, override) {\n        if (override === void 0) {\n            override = {};\n        }\n        var type = this.toastrConfig.iconClasses.info || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    };\n    ToastrService.prototype.warning = function (message, title, override) {\n        if (override === void 0) {\n            override = {};\n        }\n        var type = this.toastrConfig.iconClasses.warning || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    };\n    ToastrService.prototype.clear = function (toastId) {\n        try {\n            for (var _a = __values(this.toasts), _b = _a.next(); !_b.done; _b = _a.next()) {\n                var toast = _b.value;\n                if (toastId !== undefined) {\n                    if (toast.toastId === toastId) {\n                        toast.toastRef.manualClose();\n                        return;\n                    }\n                }\n                else {\n                    toast.toastRef.manualClose();\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_b && !_b.done && (_c = _a.return))\n                    _c.call(_a);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n        var e_1, _c;\n    };\n    ToastrService.prototype.remove = function (toastId) {\n        var found = this._findToast(toastId);\n        if (!found) {\n            return false;\n        }\n        found.activeToast.toastRef.close();\n        this.toasts.splice(found.index, 1);\n        this.currentlyActive = this.currentlyActive - 1;\n        if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n            return false;\n        }\n        if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n            var p = this.toasts[this.currentlyActive].toastRef;\n            if (!p.isInactive()) {\n                this.currentlyActive = this.currentlyActive + 1;\n                p.activate();\n            }\n        }\n        return true;\n    };\n    ToastrService.prototype.isDuplicate = function (message) {\n        for (var i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].message === message) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ToastrService.prototype.applyConfig = function (override) {\n        if (override === void 0) {\n            override = {};\n        }\n        return Object.assign({}, this.toastrConfig, override);\n    };\n    ToastrService.prototype._findToast = function (toastId) {\n        for (var i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].toastId === toastId) {\n                return { index: i, activeToast: this.toasts[i] };\n            }\n        }\n        return null;\n    };\n    ToastrService.prototype._preBuildNotification = function (toastType, message, title, config) {\n        var _this = this;\n        if (config.onActivateTick) {\n            return this.ngZone.run(function () { return _this._buildNotification(toastType, message, title, config); });\n        }\n        return this._buildNotification(toastType, message, title, config);\n    };\n    ToastrService.prototype._buildNotification = function (toastType, message, title, config) {\n        var _this = this;\n        if (!config.toastComponent) {\n            throw new Error('toastComponent required');\n        }\n        if (message && this.toastrConfig.preventDuplicates && this.isDuplicate(message)) {\n            return null;\n        }\n        this.previousToastMessage = message;\n        var keepInactive = false;\n        if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n            keepInactive = true;\n            if (this.toastrConfig.autoDismiss) {\n                this.clear(this.toasts[this.toasts.length - 1].toastId);\n            }\n        }\n        var overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n        this.index = this.index + 1;\n        var sanitizedMessage = message;\n        if (message && config.enableHtml) {\n            sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n        }\n        var toastRef = new ToastRef(overlayRef);\n        var toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n        var toastInjector = new ToastInjector(toastPackage, this._injector);\n        var component = new ComponentPortal(config.toastComponent, toastInjector);\n        var portal = overlayRef.attach(component, this.toastrConfig.newestOnTop);\n        toastRef.componentInstance = ((portal))._component;\n        var ins = {\n            toastId: this.index,\n            message: message || '',\n            toastRef: toastRef,\n            onShown: toastRef.afterActivate(),\n            onHidden: toastRef.afterClosed(),\n            onTap: toastPackage.onTap(),\n            onAction: toastPackage.onAction(),\n            portal: portal,\n        };\n        if (!keepInactive) {\n            setTimeout(function () {\n                ins.toastRef.activate();\n                _this.currentlyActive = _this.currentlyActive + 1;\n            });\n        }\n        this.toasts.push(ins);\n        return ins;\n    };\n    return ToastrService;\n}());\nvar Toast = /*@__PURE__*/ (function () {\n    function Toast(toastrService, toastPackage, ngZone) {\n        var _this = this;\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.ngZone = ngZone;\n        this.width = -1;\n        this.toastClasses = '';\n        this.state = {\n            value: 'inactive',\n            params: {\n                easeTime: this.toastPackage.config.easeTime,\n                easing: 'ease-in',\n            },\n        };\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.toastClasses = toastPackage.toastType + \" \" + toastPackage.config.toastClass;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(function () {\n            _this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(function () {\n            _this.remove();\n        });\n    }\n    Toast.prototype.ngOnDestroy = function () {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    };\n    Toast.prototype.activateToast = function () {\n        var _this = this;\n        this.state = Object.assign({}, this.state, { value: 'active' });\n        if (!this.options.disableTimeOut && this.options.timeOut) {\n            this.outsideTimeout(function () { return _this.remove(); }, this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.outsideInterval(function () { return _this.updateProgress(); }, 10);\n            }\n        }\n    };\n    Toast.prototype.updateProgress = function () {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        var now = new Date().getTime();\n        var remaining = this.hideTime - now;\n        this.width = (remaining / this.options.timeOut) * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    };\n    Toast.prototype.remove = function () {\n        var _this = this;\n        if (this.state.value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = Object.assign({}, this.state, { value: 'removed' });\n        this.outsideTimeout(function () { return _this.toastrService.remove(_this.toastPackage.toastId); }, +this.toastPackage.config.easeTime);\n    };\n    Toast.prototype.tapToast = function () {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    };\n    Toast.prototype.stickAround = function () {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        clearInterval(this.intervalId);\n        this.width = 0;\n    };\n    Toast.prototype.delayedHideToast = function () {\n        var _this = this;\n        if (this.options.disableTimeOut\n            || this.options.extendedTimeOut === 0\n            || this.state.value === 'removed') {\n            return;\n        }\n        this.outsideTimeout(function () { return _this.remove(); }, this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.outsideInterval(function () { return _this.updateProgress(); }, 10);\n        }\n    };\n    Toast.prototype.outsideTimeout = function (func, timeout) {\n        var _this = this;\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(function () { return _this.timeout = setTimeout(function () { return _this.runInsideAngular(func); }, timeout); });\n        }\n        else {\n            this.timeout = setTimeout(function () { return func(); }, timeout);\n        }\n    };\n    Toast.prototype.outsideInterval = function (func, timeout) {\n        var _this = this;\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(function () { return _this.intervalId = setInterval(function () { return _this.runInsideAngular(func); }, timeout); });\n        }\n        else {\n            this.intervalId = setInterval(function () { return func(); }, timeout);\n        }\n    };\n    Toast.prototype.runInsideAngular = function (func) {\n        if (this.ngZone) {\n            this.ngZone.run(function () { return func(); });\n        }\n        else {\n            func();\n        }\n    };\n    return Toast;\n}());\nvar DefaultGlobalConfig = /*@__PURE__*/ (function () {\n    function DefaultGlobalConfig() {\n        this.maxOpened = 0;\n        this.autoDismiss = false;\n        this.newestOnTop = true;\n        this.preventDuplicates = false;\n        this.iconClasses = {\n            error: 'toast-error',\n            info: 'toast-info',\n            success: 'toast-success',\n            warning: 'toast-warning',\n        };\n        this.toastComponent = Toast;\n        this.closeButton = false;\n        this.timeOut = 5000;\n        this.extendedTimeOut = 1000;\n        this.enableHtml = false;\n        this.progressBar = false;\n        this.toastClass = 'toast';\n        this.positionClass = 'toast-top-right';\n        this.titleClass = 'toast-title';\n        this.messageClass = 'toast-message';\n        this.easing = 'ease-in';\n        this.easeTime = 300;\n        this.tapToDismiss = true;\n        this.onActivateTick = false;\n        this.progressAnimation = 'decreasing';\n    }\n    return DefaultGlobalConfig;\n}());\nvar ToastrModule = /*@__PURE__*/ (function () {\n    function ToastrModule(parentModule) {\n        if (parentModule) {\n            throw new Error('ToastrModule is already loaded. It should only be imported in your application\\'s main module.');\n        }\n    }\n    ToastrModule.forRoot = function (config) {\n        if (config === void 0) {\n            config = {};\n        }\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                { provide: TOAST_CONFIG, useValue: { config: config, defaults: DefaultGlobalConfig } },\n                OverlayContainer,\n                Overlay,\n                ToastrService,\n            ],\n        };\n    };\n    return ToastrModule;\n}());\nvar ToastNoAnimation = /*@__PURE__*/ (function () {\n    function ToastNoAnimation(toastrService, toastPackage, appRef) {\n        var _this = this;\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.appRef = appRef;\n        this.width = -1;\n        this.toastClasses = '';\n        this.state = 'inactive';\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.toastClasses = toastPackage.toastType + \" \" + toastPackage.config.toastClass;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(function () {\n            _this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(function () {\n            _this.remove();\n        });\n    }\n    Object.defineProperty(ToastNoAnimation.prototype, \"displayStyle\", {\n        get: function () {\n            if (this.state === 'inactive') {\n                return 'none';\n            }\n            return 'inherit';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ToastNoAnimation.prototype.ngOnDestroy = function () {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    };\n    ToastNoAnimation.prototype.activateToast = function () {\n        var _this = this;\n        this.state = 'active';\n        if (!this.options.disableTimeOut && this.options.timeOut) {\n            this.timeout = setTimeout(function () {\n                _this.remove();\n            }, this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(function () { return _this.updateProgress(); }, 10);\n            }\n        }\n        if (this.options.onActivateTick) {\n            this.appRef.tick();\n        }\n    };\n    ToastNoAnimation.prototype.updateProgress = function () {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        var now = new Date().getTime();\n        var remaining = this.hideTime - now;\n        this.width = remaining / this.options.timeOut * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    };\n    ToastNoAnimation.prototype.remove = function () {\n        var _this = this;\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = 'removed';\n        this.timeout = setTimeout(function () { return _this.toastrService.remove(_this.toastPackage.toastId); });\n    };\n    ToastNoAnimation.prototype.tapToast = function () {\n        if (this.state === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    };\n    ToastNoAnimation.prototype.stickAround = function () {\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        clearInterval(this.intervalId);\n        this.width = 0;\n    };\n    ToastNoAnimation.prototype.delayedHideToast = function () {\n        var _this = this;\n        if (this.options.disableTimeOut\n            || this.options.extendedTimeOut === 0\n            || this.state === 'removed') {\n            return;\n        }\n        this.timeout = setTimeout(function () { return _this.remove(); }, this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(function () { return _this.updateProgress(); }, 10);\n        }\n    };\n    return ToastNoAnimation;\n}());\nvar ToastNoAnimationModule = /*@__PURE__*/ (function () {\n    function ToastNoAnimationModule() {\n    }\n    return ToastNoAnimationModule;\n}());\nexport { ComponentPortal, BasePortalHost, Overlay, OVERLAY_PROVIDERS, OverlayContainer, OverlayRef, ToastContainerDirective, ToastContainerModule, Toast, ToastrService, ToastPackage, DefaultGlobalConfig, ToastrModule, ToastRef, ToastInjector, TOAST_CONFIG, ToastNoAnimation, ToastNoAnimationModule };\n//# sourceMappingURL=ngx-toastr.js.map\n",null]}