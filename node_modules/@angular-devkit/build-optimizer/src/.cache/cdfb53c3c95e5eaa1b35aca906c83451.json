{"remainingRequest":"/home/snehalj/Desktop/i-programmer/admin-dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/snehalj/Desktop/i-programmer/admin-dashboard/node_modules/fcm-push/lib/fcm.js","dependencies":[{"path":"/home/snehalj/Desktop/i-programmer/admin-dashboard/node_modules/fcm-push/lib/fcm.js","mtime":1507020778000},{"path":"/home/snehalj/Desktop/i-programmer/admin-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/snehalj/Desktop/i-programmer/admin-dashboard/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["var https = require('https');\r\nvar retry = require('retry');\r\nvar Promise = require('bluebird');\r\n\r\nfunction FCM(serverKey, agent) {\r\n    if (serverKey) {\r\n        this.serverKey = serverKey;\r\n    } else {\r\n        throw Error('No serverKey is given.');\r\n    }\r\n\r\n    this.fcmOptions = {\r\n        host: 'fcm.googleapis.com',\r\n        port: 443,\r\n        path: '/fcm/send',\r\n        method: 'POST',\r\n        headers: {}\r\n    };\r\n    \r\n     if (agent) {\r\n         this.fcmOptions.agent = agent;\r\n     }\r\n}\r\n\r\n//callback function must follow node standard (err, data) => {}\r\nFCM.prototype.send = function(payload, CB) {\r\n    var self = this;\r\n\r\n    return new Promise(function (resolve, reject){\r\n        var operation = retry.operation();\r\n\r\n        payload = JSON.stringify(payload);\r\n        //copying the fcmOptions object to avoid problems in parallel calls\r\n        var mFcmOptions = JSON.parse(JSON.stringify(self.fcmOptions));\r\n\r\n        operation.attempt(function(currentAttempt) {\r\n            var headers = {\r\n                'Host': mFcmOptions.host,\r\n                'Authorization': 'key=' + self.serverKey,\r\n                'Content-Type': 'application/json',\r\n                'Content-Length': new Buffer(payload).length\r\n            };\r\n\r\n            mFcmOptions.headers = headers;\r\n\r\n            if (self.keepAlive) headers.Connection = 'keep-alive';\r\n\r\n            var request = https.request(mFcmOptions, function(res) {\r\n                var data = '';\r\n                if (res.statusCode == 503) {\r\n                    // If the server is temporary unavailable, the C2DM spec requires that we implement exponential backoff\r\n                    // and respect any Retry-After header\r\n                    if (res.headers['retry-after']) {\r\n                        var retrySeconds = res.headers['retry-after'] * 1; // force number\r\n                        if (isNaN(retrySeconds)) {\r\n                            // The Retry-After header is a HTTP-date, try to parse it\r\n                            retrySeconds = new Date(res.headers['retry-after']).getTime() - new Date().getTime();\r\n                        }\r\n                        if (!isNaN(retrySeconds) && retrySeconds > 0) {\r\n                            operation._timeouts['minTimeout'] = retrySeconds;\r\n                        }\r\n                    }\r\n                    if (!operation.retry('TemporaryUnavailable')) {\r\n                        CB(operation.mainError(), null);\r\n                    }\r\n                    // Ignore all subsequent events for this request\r\n                    return;\r\n                }\r\n\r\n                function respond() {\r\n                    var error = null, id = null;\r\n\r\n                    if (data.indexOf('\\\"multicast_id\\\":') > -1) {\r\n                        //handle multicast_id, send by devive token\r\n                        var anyFail = ((JSON.parse(data)).failure > 0);\r\n\r\n                        if (anyFail) {\r\n                            var isResults = ((JSON.parse(data)).results);\r\n                            if  (isResults) {\r\n                                error = isResults[0].error;\r\n                            } else {    \r\n                                error = data.substring(0).trim();\r\n                            }\r\n                        }\r\n\r\n                        var anySuccess = ((JSON.parse(data)).success > 0);\r\n\r\n                        if (anySuccess) {\r\n                            id = data.substring(0).trim();\r\n                        }\r\n                    } else if (data.indexOf('\\\"message_id\\\":') > -1) {\r\n                        //handle topics send\r\n                        id = data;\r\n                    } else if (data.indexOf('\\\"error\\\":') > -1){\r\n                        error = data;\r\n                    } else if (data.indexOf('Unauthorized') > -1) {\r\n                        error = 'NotAuthorizedError';\r\n                    } else {\r\n                        error = 'InvalidServerResponse';\r\n                    }\r\n\r\n                    // Only retry if error is QuotaExceeded or DeviceQuotaExceeded\r\n                    if (operation.retry(currentAttempt <= 3 && ['QuotaExceeded', 'DeviceQuotaExceeded', 'InvalidServerResponse'].indexOf(error) >= 0 ? error : null)) {\r\n                        return;\r\n                    }\r\n\r\n                    // Success, return message id (without id=), or something error happened\r\n                    if (id) resolve(id);\r\n                    if (error) reject(error);\r\n                }\r\n\r\n                res.on('data', function(chunk) {\r\n                    data += chunk;\r\n                });\r\n                res.on('end', respond);\r\n                res.on('close', respond);\r\n            });\r\n\r\n            request.on('error', function(error) {\r\n                reject(error);\r\n            });\r\n\r\n            request.end(payload);\r\n        });\r\n    }).asCallback(CB);\r\n};\r\n\r\nmodule.exports = FCM;\r\n",null]}